package aw2m;

/**
 * A mapboard object contains a reference to a GridCell array as the mapboard,
 * or board; as well as keeping track on the players' funds and Power and
 * SuperPower meters, via the Player references.
 *
 * This implementation details should go unto a Game or Match object instance,
 * to avoid ambiguity. 
 *
 *
 * @author Alejandro TÃ©llez G. <java.util.fck@hotmail.com>
 */
public class Map {

    private GridCell[][] mapboard;
    private Player player1;
    private Player player2;

    //Turn
    //Lista de unidad
    //
    public Map() {
    }

    /**
     * Creates and initializes an empty abstract mapboard. Each GridCell has not
     * yet been asigned a terrain, and therefore, the mapboard, array of
     * GridCell objects, generated by this method is not yet ready for playing.
     *
     * @param x
     * @param y
     */
    public void createMapbard(byte x, byte y) {
        this.setMapboard(new GridCell[x][y]);
        for (byte i = 0; i < x; i++) {
            for (byte j = 0; j < y; j++) {
                getMapboard()[i][j] = new GridCell();
                mapboard[i][j].x = i;
                mapboard[i][j].y = j;
            }
        }
    }

    /**
     * @return the mapboard
     */
    public GridCell[][] getMapboard() {
        return mapboard;
    }

    /**
     * @param mapboard the mapboard to set
     */
    public void setMapboard(GridCell[][] mapboard) {
        this.mapboard = mapboard;
    }

    /**
     * @return the player1
     */
    public Player getPlayer1() {
        return player1;
    }

    /**
     * @param player1 the player1 to set
     */
    public void setPlayer1(Player player1) {
        this.player1 = player1;
    }

    /**
     * @return the player2
     */
    public Player getPlayer2() {
        return player2;
    }

    /**
     * @param player2 the player2 to set
     */
    public void setPlayer2(Player player2) {
        this.player2 = player2;
    }
}
